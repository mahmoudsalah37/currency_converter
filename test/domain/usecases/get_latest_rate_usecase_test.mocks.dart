// Mocks generated by Mockito 5.4.4 from annotations
// in currency_converter/test/domain/usecases/get_latest_rate_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:currency_converter/domain/entities/currency.dart' as _i5;
import 'package:currency_converter/domain/entities/exchange_rate.dart' as _i2;
import 'package:currency_converter/domain/repositories/currency_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExchangeRate_0 extends _i1.SmartFake implements _i2.ExchangeRate {
  _FakeExchangeRate_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRepository extends _i1.Mock
    implements _i3.CurrencyRepository {
  MockCurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Currency>> getCurrencies() => (super.noSuchMethod(
        Invocation.method(
          #getCurrencies,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Currency>>.value(<_i5.Currency>[]),
      ) as _i4.Future<List<_i5.Currency>>);

  @override
  _i4.Future<_i2.ExchangeRate> getLatestRate(
    String? base,
    String? target,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestRate,
          [
            base,
            target,
          ],
        ),
        returnValue: _i4.Future<_i2.ExchangeRate>.value(_FakeExchangeRate_0(
          this,
          Invocation.method(
            #getLatestRate,
            [
              base,
              target,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ExchangeRate>);
}

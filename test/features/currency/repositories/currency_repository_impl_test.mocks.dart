// Mocks generated by Mockito 5.4.4 from annotations
// in currency_converter/test/features/currency/repositories/currency_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i9;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i10;
import 'package:currency_converter/data/datasources/local_data_source.dart'
    as _i6;
import 'package:currency_converter/data/datasources/remote_data_source.dart'
    as _i3;
import 'package:currency_converter/data/models/currency_model.dart' as _i5;
import 'package:currency_converter/data/models/exchange_rate_hive_model.dart'
    as _i8;
import 'package:currency_converter/data/models/exchange_rate_model.dart' as _i2;
import 'package:currency_converter/domain/entities/currency.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExchangeRateModel_0 extends _i1.SmartFake
    implements _i2.ExchangeRateModel {
  _FakeExchangeRateModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i3.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.CurrencyModel>> getCurrencies() => (super.noSuchMethod(
        Invocation.method(
          #getCurrencies,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.CurrencyModel>>.value(<_i5.CurrencyModel>[]),
      ) as _i4.Future<List<_i5.CurrencyModel>>);

  @override
  _i4.Future<_i2.ExchangeRateModel> getLatestRate(
    String? base,
    String? target,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestRate,
          [
            base,
            target,
          ],
        ),
        returnValue:
            _i4.Future<_i2.ExchangeRateModel>.value(_FakeExchangeRateModel_0(
          this,
          Invocation.method(
            #getLatestRate,
            [
              base,
              target,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ExchangeRateModel>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i6.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.Currency>> getCurrencies() => (super.noSuchMethod(
        Invocation.method(
          #getCurrencies,
          [],
        ),
        returnValue: _i4.Future<List<_i7.Currency>>.value(<_i7.Currency>[]),
      ) as _i4.Future<List<_i7.Currency>>);

  @override
  _i4.Future<void> saveCurrencies(List<_i7.Currency>? currencies) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrencies,
          [currencies],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasCurrencies() => (super.noSuchMethod(
        Invocation.method(
          #hasCurrencies,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i8.ExchangeRateHiveModel?> getExchangeRate(
    String? base,
    String? target,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExchangeRate,
          [
            base,
            target,
          ],
        ),
        returnValue: _i4.Future<_i8.ExchangeRateHiveModel?>.value(),
      ) as _i4.Future<_i8.ExchangeRateHiveModel?>);

  @override
  _i4.Future<void> saveExchangeRate(_i8.ExchangeRateHiveModel? rate) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveExchangeRate,
          [rate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasExchangeRate(
    String? base,
    String? target,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasExchangeRate,
          [
            base,
            target,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i9.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i10.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<_i10.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i10.ConnectivityResult>);

  @override
  _i4.Future<_i10.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i4.Future<_i10.ConnectivityResult>.value(
            _i10.ConnectivityResult.bluetooth),
      ) as _i4.Future<_i10.ConnectivityResult>);
}
